[tool.poetry]
name = "spl-core"
version = "0.0.0"
description = "Software Product Line Support for CMake"
authors = ["Avengineers <karsten.guenther@kamg.de>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/avengineers/spl-core"
documentation = "https://spl-core.readthedocs.io"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
packages = [
    { include = "spl_core", from = "src" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/avengineers/spl-core/issues"
"Changelog" = "https://github.com/avengineers/spl-core/blob/develop/CHANGELOG.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
py-app-dev = "^2.1.0"
cookiecutter = {version="==2.1.1"}
gcovr = "*"
hammocking = "*"
kconfiglib = "*"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
black = "^23.1.0"
pre-commit = "^3.1.1"
ruff = "^0.3.0"
jinja2 = "*"
testfixtures = "*"
junitparser = "*"
mashumaro = "*"
loguru = "*"
m2r = "*"
flake8 = "*"
sphinx = "*"
sphinx-rtd-theme = "*"
sphinxcontrib-mermaid = "*"
sphinx-needs = "*"
sphinx-test-reports = "*"
doxysphinx = "*"
sphinx-rtd-size = "*"
sphinxcontrib-datatemplates = "*"
sphinxcontrib-plantuml = "*"
sphinx-copybutton = "*"
sphinx-new-tab-link = "*"
pipenv = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = ">=0.16"
sphinx = ">=4.0"
sphinxcontrib-mermaid = "^0.8.1"
mlx-traceability = "^10.0.0"
sphinx-copybutton = "^0.5.2"
sphinx-new-tab-link = "^0.2.2"
sphinx-book-theme = "^1.1.2"
sphinx-design = "^0.5.0"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/spl_core/__init__.py:__version__",
    "docs/conf.py:release",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "develop"

[tool.semantic_release.branches.noop]
match = "(?!develop$)"
prerelease = true

[tool.pytest.ini_options]
addopts = " --verbose --capture=tee-sys --junitxml=out/test-report.xml"
pythonpath = ["src", "tests"]
testpaths = ["tests"]
junit_logging = "all"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.ruff]
target-version = "py38"
line-length = 220
lint.ignore = [
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D401", # First line of docstring should be in imperative mood
    "S603", # subprocess calls with shell=True
]
lint.select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]
exclude = [
    "bootstrap.py"
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
"docs/conf.py" = ["D100"]

[tool.ruff.lint.isort]
known-first-party = ["spl_core", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
